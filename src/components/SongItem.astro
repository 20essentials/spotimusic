<script type='module'>
  import { setAnimation } from './modules/setAnimation.js';

  class SongItem extends HTMLElement {
    constructor() {
      super();
      this.attachShadow({ mode: 'open' });
    }

    static get styles() {
      return /* css */ `
        .row-item {
          display: grid;
          grid-template-columns: var(--playlist-format);
          font-family: var(--default-font);
          align-items: center;
          padding: 0.25vmax 0.5vmax;
          border-radius: calc(var(--pad-gap) / 2);
          user-select: none;

          div:nth-child(4),
          div:nth-child(5) {
            text-align: center;
            
          }

          &:hover {
            background: #ffffff15;
            cursor: pointer;
          }
        }

        .text {
          font-size:1vmax;
        }

        .title-container {
          display: flex;
          align-items: center;
          gap: 1vmax;

          & img {
            --size: 3.5vmax;
            width: var(--size);
            height: var(--size);
            border-radius: calc(var(--pad-gap) / 2);

            @media (width <= 800px) and (orientation: landscape) {
              --size: 2.5vmax;
            }
          }

          & .group {
            display: inline-flex;
            flex-direction: column;

            & .artist {
              color: var(--dark-textcolor);

              .row-item:hover & {
                color: #fff;
              }
            }
          }
        }
      `;
    }

    connectedCallback() {
      this.slug = this.getAttribute('slug');
      this.title = this.getAttribute('title');
      this.artist = this.getAttribute('artist');
      this.album = this.getAttribute('album');
      this.date = this.getAttribute('date');
      this.duration = this.getAttribute('duration');
      this.index = Number(this.getAttribute('index'));
      this.urlPoster = this.getAttribute('urlPoster');
      this.urlSong = this.getAttribute('urlSong');
      this.image = this.urlPoster;
      this.thumb = this.urlPoster;
      this.render();
      const rowItem = this.shadowRoot.querySelector('.row-item');
      setTimeout(() => setAnimation(rowItem, 'FadeMove'), this.index * 25);
    }

    getData() {
      return {
        index: this.index,
        album: this.album,
        artist: this.artist,
        date: this.date,
        duration: this.duration,
        slug: this.slug,
        title: this.title,
        urlPoster: this.urlPoster,
        urlSong: this.urlSong
      };
    }

    render() {
      this.shadowRoot.innerHTML = /* html */ `
        <style>${SongItem.styles}</style>
        <div class="row-item" data-id=${this.index}>
          <div class="num text">${(this.index + 1).toString().padStart(2, '0')}</div>
          <div class="title-container">
            <img class="img-thumb" src=${this.thumb} alt=${this.title}>
            <div class="group">
              <div class="text">${this.title}</div>
              <div class="artist text">${this.artist}</div>
            </div>
          </div>
          <div class="text">${this.album}</div>
          <div class="text">${this.date.substring(0, 10)}</div>
          <div class="text">${this.duration}</div>
        </div>
      `;
    }
  }

  customElements.define('song-item', SongItem);
</script>
